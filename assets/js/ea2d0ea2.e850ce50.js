"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5127],{274:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>o,contentTitle:()=>u,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"materi/pertemuan5/materiRecursiveFunction","title":"Python Recursive Function","description":"---","source":"@site/docs/materi/pertemuan5/functionRecursive.md","sourceDirName":"materi/pertemuan5","slug":"/materi/pertemuan5/materiRecursiveFunction","permalink":"/praktikum-dasar-pemrograman/docs/materi/pertemuan5/materiRecursiveFunction","draft":false,"unlisted":false,"editUrl":"https://github.com/prayudahlah/praktikum-dasar-pemrograman/edit/main/docs/materi/pertemuan5/functionRecursive.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"materiRecursiveFunction","title":"Python Recursive Function","sidebar_label":"Python Recursive Function","sidebar_position":2},"sidebar":"materiSidebar","previous":{"title":"Python Function","permalink":"/praktikum-dasar-pemrograman/docs/materi/pertemuan5/materiFunction"}}');var i=a(4848),t=a(8453);const s={id:"materiRecursiveFunction",title:"Python Recursive Function",sidebar_label:"Python Recursive Function",sidebar_position:2},u=void 0,o={},l=[{value:"\ud83d\udd04 Function Rekursif",id:"-function-rekursif",level:2},{value:"Struktur Function Rekursif:",id:"struktur-function-rekursif",level:3},{value:"Contoh 1: Menghitung Pangkat",id:"contoh-1-menghitung-pangkat",level:3},{value:"Contoh 2: Membalik String",id:"contoh-2-membalik-string",level:3},{value:"Rekursif vs Iteratif: Kapan Menggunakan Apa?",id:"rekursif-vs-iteratif-kapan-menggunakan-apa",level:3}];function c(n){const e={blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"-function-rekursif",children:"\ud83d\udd04 Function Rekursif"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Function rekursif"})," adalah function yang memanggil dirinya sendiri. Bayangkan seperti cermin yang saling berhadapan, menciptakan refleksi tak terbatas - namun dalam pemrograman, kita harus memberikan titik berhenti. Function rekursif sangat berguna untuk masalah yang dapat dipecah menjadi versi lebih kecil dari masalah yang sama."]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["\u26a0\ufe0f ",(0,i.jsx)(e.strong,{children:"Penting!"})," Function rekursif harus memiliki ",(0,i.jsx)(e.strong,{children:"base case"})," (kondisi berhenti), jika tidak akan terjadi infinite loop!"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"struktur-function-rekursif",children:"Struktur Function Rekursif:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"def function_rekursif(parameter):\r\n    # BASE CASE - kondisi berhenti (penting!)\r\n    if kondisi_berhenti:\r\n        return nilai_dasar\r\n    \r\n    # RECURSIVE CASE - memanggil diri sendiri dengan parameter lebih sederhana\r\n    else:\r\n        return function_rekursif(parameter_lebih_kecil)\n"})}),"\n",(0,i.jsx)(e.h3,{id:"contoh-1-menghitung-pangkat",children:"Contoh 1: Menghitung Pangkat"}),"\n",(0,i.jsx)(e.p,{children:"Menghitung x pangkat n (x^n) secara rekursif:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'def pangkat(x, n):\r\n    """\r\n    Menghitung x pangkat n secara rekursif\r\n    Contoh: 2^3 = 2 \xd7 2 \xd7 2 = 8\r\n    """\r\n    # Base case: angka pangkat 0 = 1\r\n    if n == 0:\r\n        return 1\r\n    \r\n    # Recursive case: x^n = x \xd7 x^(n-1)\r\n    else:\r\n        return x * pangkat(x, n - 1)\r\n\r\n# Penggunaan\r\nprint(pangkat(2, 3))   # 8\r\nprint(pangkat(5, 2))   # 25\r\nprint(pangkat(10, 0))  # 1\n'})}),"\n",(0,i.jsx)(e.p,{children:"Visualisasi proses:"}),"\n",(0,i.jsx)(e.mermaid,{value:'graph TD\r\n  A["<span style="color:#FF5533">pangkat(2, 3)</span>"] --\x3e B["2 \xd7 <span style="color:#FF5533">pangkat(2, 2)</span>"]\r\n  B --\x3e C["2 \xd7 2 \xd7 <span style="color:#FF5533">pangkat(2, 1)</span>"]\r\n  C --\x3e D["2 \xd7 2 \xd7 2 \xd7 <span style="color:#FF5533">pangkat(2, 0)</span>"]\r\n  D --\x3e E["2 \xd7 2 \xd7 2 \xd7 1"]\r\n  E --\x3e F["8"]'}),"\n",(0,i.jsx)(e.h3,{id:"contoh-2-membalik-string",children:"Contoh 2: Membalik String"}),"\n",(0,i.jsx)(e.p,{children:"Membalik urutan karakter dalam string:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'def balik_string(text):\r\n    """\r\n    Membalik string secara rekursif\r\n    \'data\' menjadi \'atad\'\r\n    """\r\n    # Base case: string kosong atau 1 karakter\r\n    if len(text) <= 1:\r\n        return text\r\n    \r\n    # Recursive case: ambil karakter terakhir + balik sisanya\r\n    else:\r\n        return text[-1] + balik_string(text[:-1])\r\n\r\n# Penggunaan\r\nprint(balik_string("data"))       # "atad"\r\nprint(balik_string("python"))     # "nohtyp"\r\nprint(balik_string("rekursif"))   # "fisruker"\r\n\n'})}),"\n",(0,i.jsx)(e.p,{children:'Visualisasi proses untuk "data":'}),"\n",(0,i.jsx)(e.mermaid,{value:'graph TD\r\n  A["<span style="color:#FF5533">balik(&quot;data&quot;)</span>"]\r\n  A --\x3e B["a + <span style="color:#FF5533">balik(&quot;dat&quot;)</span>"]\r\n  B --\x3e C["a + t + <span style="color:#FF5533">balik(&quot;da&quot;)</span>"]\r\n  C --\x3e D["a + t + a + <span style="color:#FF5533">balik(&quot;d&quot;)</span>"]\r\n  D --\x3e E["a + t + a + d"]\r\n  E --\x3e F((#quot;atad#quot;))'}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h3,{id:"rekursif-vs-iteratif-kapan-menggunakan-apa",children:"Rekursif vs Iteratif: Kapan Menggunakan Apa?"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"# Contoh: Menghitung panjang list\r\n\r\n# REKURSIF - elegan untuk masalah yang bersifat rekursif\r\ndef panjang_rekursif(lst):\r\n    if len(lst) == 0:\r\n        return 0\r\n    return 1 + panjang_rekursif(lst[1:])\r\n\r\n# ITERATIF - lebih efisien untuk kasus sederhana\r\ndef panjang_iteratif(lst):\r\n    count = 0\r\n    for _ in lst:\r\n        count += 1\r\n    return count\r\n\r\ndata = [1, 2, 3, 4, 5]\r\nprint(panjang_rekursif(data))   # 5\r\nprint(panjang_iteratif(data))   # 5\n"})}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["\u26a0\ufe0f ",(0,i.jsx)(e.strong,{children:"Perhatian:"})," Rekursif yang terlalu dalam bisa menyebabkan ",(0,i.jsx)(e.code,{children:"RecursionError: maximum recursion depth exceeded"}),". Python default limit adalah sekitar 1000 level rekursi."]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:"Panduan ini dibuat untuk mahasiswa sains data yang baru belajar coding. Jangan ragu untuk bereksperimen dengan kode dan membuat function sendiri!"})})]})}function d(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}}}]);