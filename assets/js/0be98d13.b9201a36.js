"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8299],{3353:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"type":"mdx","permalink":"/praktikum-dasar-pemrograman/demo","source":"@site/src/pages/demo.md","title":"Brython Demo","description":"Discover interactive Python code execution with Live Python Playgrounds in your browser, powered by Brython. Perfect for learning and experimenting with ease.","frontMatter":{"image":"https://lebalz.github.io/docusaurus-live-brython/img/og_preview.png"},"unlisted":false}');var i=r(4848),o=r(8453);const s={image:"https://lebalz.github.io/docusaurus-live-brython/img/og_preview.png"},a="Brython Demo",l={},d=[{value:"Input Output",id:"input-output",level:2},{value:"Turtle Graphics",id:"turtle-graphics",level:2},{value:"Fractals",id:"fractals",level:2},{value:"Game Loop",id:"game-loop",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"brython-demo",children:"Brython Demo"})}),"\n",(0,i.jsx)(n.p,{children:"Discover interactive Python code execution with Live Python Playgrounds in your browser, powered by Brython. Perfect for learning and experimenting with ease."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:"live_py",children:"print('Live Brython')\n\n"})}),"\n",(0,i.jsx)(n.h2,{id:"input-output",children:"Input Output"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:"live_py title=guess.py",children:"from browser import alert\nfrom random import randint \n\nnumber = randint(0, 100)\nguessed = -1\nattempt = 1\n\nwhile guessed != number:\n    guessed = input(f'{attempt} Try: Enter a number from 0 to 100')\n    if guessed == '':\n        break\n    try:\n        guessed = int(guessed)\n    except:\n        alert('Nope, this was not a valid number')\n        continue\n    attempt += 1\n    if guessed == number:\n        alert(f'Yay \ud83e\udd73, you found the number {number} in {attempt} attempt!')\n        break\n    elif guessed > number:\n        alert(f'The entered number {guessed} is too big')\n    else:\n        alert(f'The entered number {guessed} ist too small')\n\nif guessed==number:\n    print(f'you found the number {number} you were looking for in {attempt} attempts. \ud83e\udd73')\nelse:\n    print(f'The searched number was {number}')\n"})}),"\n",(0,i.jsx)(n.h2,{id:"turtle-graphics",children:"Turtle Graphics"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:"live_py title=turtles.py",children:"from turtle import *\ncolor('red', 'yellow')\nbegin_fill()\nwhile True:\n    forward(200)\n    left(170)\n    p = pos()\n    if abs(p[0]) < 1 and abs(p[1]) < 1:\n        break\nend_fill()\ndone()\n"})}),"\n",(0,i.jsx)(n.h2,{id:"fractals",children:"Fractals"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:"live_py title=tree.py",children:"from turtle import *\n\nspeed(0)\npenup()\ngoto(0, -200)\npendown()\nleft(90)\ndef tree(size):\n    if size < 5:\n        forward(size)\n    else:\n        forward(size)\n        left(35)\n        tree(size / 1.5)\n        backward(size / 1.5)\n        right(100)\n        tree(size / 1.5)\n        backward(size / 1.5)\n        left(65)\ntree(120)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"game-loop",children:"Game Loop"}),"\n",(0,i.jsxs)(n.p,{children:["Undocumented POC that more complex (cool!) stuff is possible. Check out ",(0,i.jsx)(n.a,{href:"https://conwaylife.com/",children:"Conways Game of Life"})," by running the example below."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:"live_py title=conway.py",children:"from grid import Grid\nfrom game import gameloop, sleep\n\n# initial state\ngrid = Grid.from_text('''\n  \n \n \n \n \n \n \n \n  \n  \n  \n           xx  xx            \n            xx x  \n            x  x               \n            x  x  \n            x xx  \n           xx  xx  \n           \n           \n        \n        \n          \n          \n          \n          \n''')\n\ndef neighbours(grid, x, y):\n    nb = []\n    dim_x = len(grid[0])\n    dim_y = len(grid)\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if not (i == 0 and j == 0):\n                ny = (y + i) % dim_y\n                nx = (x + j) % dim_x\n                nb.append(grid[ny][nx])\n    return nb\n\ndef live_neighbours(grid, x, y):\n    s = 0\n    for cell in neighbours(grid, x, y):\n        if cell == 'black':\n            s += 1\n    return s\n\n@gameloop\ndef evolution(dt):\n    current = grid.color_grid\n    for x in range(grid.size[1]):\n        for y in range(grid.size[0]):\n            alive = live_neighbours(current, x, y)\n            if current[y][x] == 'black' and 2 <= alive <= 3:\n                grid[y][x].color = 'black'\n            elif current[y][x] != 'black' and alive == 3:\n                grid[y][x].color = 'black'\n            else:\n                grid[y][x].color = 'white'\n    sleep(5)\n\nevolution()\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);